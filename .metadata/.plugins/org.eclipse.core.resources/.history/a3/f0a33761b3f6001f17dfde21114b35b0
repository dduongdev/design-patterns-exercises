package com.dduongdev;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class ConfigurationManager {
	private static volatile ConfigurationManager instance = null;
	private Map<String, String> configs;
	private Connection connection = null;
	
	private ConfigurationManager() {
	    try {
	        configs = new HashMap<>();
	        Properties properties = new Properties();

	        properties.load(ConfigurationManager.class.getResourceAsStream("/application.properties"));

	        properties.forEach((key, value) -> configs.put(String.valueOf(key), String.valueOf(value)));

	        System.out.println(configs);
	    } catch (IOException ex) {
	        System.err.println("Lỗi khi đọc cấu hình: " + ex.getMessage());
	    }
	}

	
	public static synchronized ConfigurationManager getInstance() {
		if (instance == null) {
			instance = new ConfigurationManager();
		}
		return instance;
	}
	
	public synchronized String getConfig(String name) {
		return configs.get(name);
	}
	
	public synchronized void updateConfig(String name, String value) {
		if (configs.containsKey(name)) {
			configs.put(name, value);
			updateConfigFile();
		}
	}
	
	public synchronized void addConfig(String name, String value) {
		configs.put(name, value);
		updateConfigFile();
	}
	
	private void updateConfigFile() {
        Properties properties = new Properties();
        properties.putAll(configs);

        try (OutputStream output = new FileOutputStream("resources/application.properties")) {
            properties.store(output, "Updated Configuration");
        } catch (IOException e) {
            System.err.println("Error updating config file: " + e.getMessage());
        }
    }
	
	public Connection getConnection() {
		if (connection != null) {
			return connection;
		}
	}
}
